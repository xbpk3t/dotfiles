---


pwgen:
  description: pwgen
  icon: "lock"
  ifenvset: PWGEN_SECRET
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # 使用 fuzzel 作为输入框（raffi 默认用 fuzzel）
    website=$(echo "" | fuzzel --dmenu --lines=0)

    [ -z "$website" ] && exit 1

    password=$(pwgen --secret="$PWGEN_SECRET" "$website")

    echo -n "$password"



bookmarks:
  description: Bookmarks
  icon: "bookmark"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    ICON_DIR="/home/luck/Desktop/docs-images/workflow/ww"

    # 1. 生成列表：alias\turl\ticon_path
    generate_list() {
      json=$(task -g ww:json 2>/dev/null || echo "[]")
      echo "$json" | jq -r --arg d "$ICON_DIR" '
        .[] |
        (.alias | gsub("[^a-zA-Z0-9_-]"; "-")) as $safe |
        "\(.alias)\t\(.url)\t\($d)/\($safe).png"
      '
    }

    # 2. 管道到 fuzzel 显示 + 读取选中 URL
    selected_url=$(generate_list | while IFS=$'\t' read -r alias url icon; do
      if [ -f "$icon" ]; then
        printf '%s\x00icon\x1f%s\n' "$alias" "$icon"
      elif [ -f "${icon%.png}.svg" ]; then
        printf '%s\x00icon\x1f%s\n' "$alias" "${icon%.png}.svg"
      else
        echo "$alias"
      fi
    done | fuzzel --dmenu --prompt="Bookmarks: " --lines=20)

    # 3. 打开选中的 URL
    [ -n "$selected_url" ] && xdg-open "$selected_url" 2>/dev/null || true



snippet:
  description: "ss"
  icon: "text-snippet"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # 1. 获取所有names并显示到fuzzel
    selected_name=$(task -g ss:json 2>/dev/null | jq -r '.[].sub[] | .name' | fuzzel --dmenu --prompt="Snippets: " --lines=20)

    # 2. 检查是否选择
    [ -z "$selected_name" ] && exit 1

    # 3. 从原始JSON中查找对应的值
    value=$(task -g ss:json 2>/dev/null | jq -r --arg name "$selected_name" '
      .[].sub[] |
      select(.name == $name) |
      .val
    ')

    # 4. 输出值
    if [ -n "$value" ] && [ "$value" != "null" ]; then
      echo -n "$value"
    else
      echo "No value found for name: [$selected_name]" >&2
    fi


gh:
  description: gh
  icon: "github"
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # 1. 获取仓库列表并显示到fuzzel（显示完整格式：author/repo）
    selected_repo=$(dgh --output raw 2>/dev/null | jq -r '
      .[] |
      (.URL | split("/") | .[3] + "/" + .[4]) as $full_name |
      $full_name
    ' | fuzzel --dmenu --prompt="GitHub Repos: " --lines=20)

    # 2. 检查是否选择
    [ -z "$selected_repo" ] && exit 1

    # 3. 从原始JSON中查找对应的仓库信息
    repo_info=$(dgh --output raw 2>/dev/null | jq -r --arg full_name "$selected_repo" '
      .[] |
      (.URL | split("/") | .[3] + "/" + .[4]) as $repo_full_name |
      select($repo_full_name == $full_name) |
      {url: .URL, doc: .Doc, des: (.Des // ""), tag: .Tag}
    ')

    # 4. 如果没找到仓库信息，退出
    if [ -z "$repo_info" ] || [ "$repo_info" = "null" ]; then
      echo "No repository found for: [$selected_repo]" >&2
      exit 1
    fi

    # 5. 提取信息
    repo_url=$(echo "$repo_info" | jq -r '.url')
    repo_doc=$(echo "$repo_info" | jq -r '.doc // empty')
    repo_full_name="$selected_repo"

    # 6. 显示操作选项（只显示4个选项，去除重复的）
    action=$(printf "Open Repository\nOpen Docs (docs.lucc.dev)\n%s\nCopy URL" \
      "$(if [ -n "$repo_doc" ] && [ "$repo_doc" != "null" ]; then echo "Open Documentation"; fi)" | \
      grep -v '^$' | fuzzel --dmenu --prompt="Action for $repo_full_name: " --lines=10)

    # 7. 执行对应操作
    case "$action" in
      "Open Repository")
        xdg-open "$repo_url" 2>/dev/null || true
        notify-send "GitHub" "Opening $repo_full_name" 2>/dev/null || true
        ;;
      "Open Docs (docs.lucc.dev)")
        docs_url="https://docs.lucc.dev/$(echo "$repo_full_name" | cut -d'/' -f2)"
        xdg-open "$docs_url" 2>/dev/null || true
        notify-send "GitHub" "Opening docs for $repo_full_name" 2>/dev/null || true
        ;;
      "Open Documentation")
        xdg-open "$repo_doc" 2>/dev/null || true
        notify-send "GitHub" "Opening documentation for $repo_full_name" 2>/dev/null || true
        ;;
      "Copy URL")
        echo -n "$repo_url" | wl-copy 2>/dev/null || echo -n "$repo_url" | xclip -selection clipboard 2>/dev/null || true
        notify-send "GitHub" "URL copied for $repo_full_name" 2>/dev/null || true
        ;;
      *)
        exit 0
        ;;
    esac
