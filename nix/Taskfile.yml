version: '3'

includes:
  lint: ./Taskfile.lint.yml
  sk: ./secrets/Taskfile.yml


# Nix-Darwin management tasks
# Converted from rich-demo Justfile with additional migration functionality

vars:
  NIX_DIR: './nix'
  HOSTNAME:
    sh: scutil --get ComputerName | tr ' ' '-' | tr '[:upper:]' '[:lower:]'
  SYSTEM:
    sh: |
      if [[ $(uname -m) == "arm64" ]]; then
        echo "aarch64-darwin"
      else
        echo "x86_64-darwin"
      fi
  OS:
    sh: uname
  USERNAME:
    sh: whoami
  # Default cleanup days for maintenance tasks
  CLEANUP_DAYS: '{{.CLEANUP_DAYS | default "3"}}'
  # Nix store path
  NIX_STORE_PATH: '/nix/store'
  # System profile path
  SYSTEM_PROFILE: '/nix/var/nix/profiles/system'
  # GitHub token pulled from gh CLI for GitHub API rate limits
  GITHUB_TOKEN:
    sh: gh auth token 2>/dev/null || echo ""

env:
  NIX_CONFIG: 'access-tokens = github.com={{.GITHUB_TOKEN}}'


tasks:
  default:
    desc: "构建并切换到当前系统配置"
    cmds:
      - task: build-switch

  # === 核心构建任务 ===
  build:
    desc: "构建系统配置（不切换）"
    cmds:
      - echo "正在为 {{.HOSTNAME}} ({{.SYSTEM}}) 构建 {{.OS}} 配置..."
      - |
        if [[ "{{.OS}}" == "Darwin" ]]; then
          nix build ./nix#darwinConfigurations.{{.HOSTNAME}}.system --extra-experimental-features 'nix-command flakes'
        else
          nix build ./nix#nixosConfigurations.{{.HOSTNAME}}.config.system.build.toplevel --extra-experimental-features 'nix-command flakes'
        fi
      - echo "构建完成！"

  build-switch:
    desc: "构建并切换到新配置"
    cmds:
      - echo "正在构建并切换 {{.OS}} 配置..."
      - |
        if [[ "{{.OS}}" == "Darwin" ]]; then
          sudo darwin-rebuild switch --flake ./nix#{{.HOSTNAME}}
        else
          sudo nixos-rebuild switch --flake ./nix#{{.HOSTNAME}}
        fi
      - echo "切换到新配置完成！"


  darwin:
    desc: "构建并切换到 nix-darwin 配置"
    cmds:
      - echo "🚀 正在为 {{.HOSTNAME}} ({{.SYSTEM}}) 构建 nix-darwin 配置..."
      - nix build ./nix#darwinConfigurations.{{.HOSTNAME}}.system --extra-experimental-features 'nix-command flakes'
      - echo "🔄 正在切换到新配置..."
      - sudo darwin-rebuild switch --flake ./nix#{{.HOSTNAME}}
      - echo "✅ nix-darwin 配置应用成功！"

  darwin-debug:
    desc: "使用详细输出构建并切换（用于调试）"
    cmds:
      - echo "🐛 正在使用调试输出构建 nix-darwin 配置..."
      - nix build ./nix#darwinConfigurations.{{.HOSTNAME}}.system --show-trace --verbose --extra-experimental-features 'nix-command flakes'
      - echo "🔄 正在使用调试输出切换..."
      - sudo darwin-rebuild switch --flake ./nix#{{.HOSTNAME}} --show-trace --verbose

  # Nix related commands
  update:
    desc: "更新所有 flake 到最新版本，并查看更新内容"
    cmds:
      - task: upgrade-nix
      - nix flake update # nix flake update --flake ./nix
      - nix flake show


  upgrade-nix:
    cmd: nix upgrade-nix

  update-input:
    desc: "Update specific flake input (usage: task nix:update-input INPUT=nixpkgs)"
    cmds:
      - nix flake lock --update-input "{{.INPUT}}" ./nix
    requires:
      vars: [INPUT]

  history:
    desc: "List all generations of the system profile"
    cmds:
      - nix profile history --profile /nix/var/nix/profiles/system

  repl:
    desc: "Open a nix repl with the flake"
    cmds:
      - bash -lc 'cd nix && nix repl -f flake:nixpkgs'

  fmt:
    desc: "Format nix files in the repository"
    dir: './nix'
    cmds:
      - nix fmt

  check-config:
    desc: "Check nix-darwin configuration syntax"
    cmds:
      - echo "🔍 Checking configuration syntax..."
      - nix flake check ./nix
      - echo "✅ Configuration syntax is valid"


  prune:
    desc: clean + gc # 可以把这套流程看作 “先扔到垃圾桶，再清空垃圾桶”。只 clean不 gc，空间不会回来；只 gc不 clean，因为很多旧世代仍然引用着旧包，也清理不掉多少东西。
    cmds:
      - task: clean
      - task: clean-home
      - task: gc


  clean:
    internal: true
    interactive: true
    silent: true
    desc: 清理 system generations，注意不会立即删除软件包本身
    cmds:
      - echo "🧹 Cleaning old system generations (older than {{.CLEANUP_DAYS}} days)..."
      - sudo nix profile wipe-history --profile "{{.SYSTEM_PROFILE}}" --older-than "{{.CLEANUP_DAYS}}d"
      - echo "✅ System generations cleaned"

  clean-home:
    internal: true
    interactive: true
    silent: true
    desc: 清理 home-manager generations，同样不会立即删除软件包本身
    cmds:
      - echo "🧹 Cleaning home-manager generations..."
      - nix profile wipe-history --profile ~/.local/state/nix/profiles/home-manager --older-than "{{.CLEANUP_DAYS}}d" 2>/dev/null || echo "No home-manager profile found"

  gc:
    internal: true
    interactive: true
    silent: true
    desc: 真正删除所有未被引用的软件包，释放磁盘空间。
    cmds:
      - echo "🗑️  Running garbage collection (older than {{.CLEANUP_DAYS}} days)..."
      # - sudo nix-collect-garbage --delete-older-than "{{.CLEANUP_DAYS}}d"
      - nix-collect-garbage --delete-older-than "{{.CLEANUP_DAYS}}d"
      - echo "✅ Garbage collection completed"


#  status:
#    desc: "Show comprehensive system status"
#    silent: true
#    cmds:
#      - task: info
#      - task: disk-usage
#      - echo "Recent system generations:"
#      - nix profile history --profile "{{.SYSTEM_PROFILE}}" | head -10 || echo "  Could not read system profile history"
