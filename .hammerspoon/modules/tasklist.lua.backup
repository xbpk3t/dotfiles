-- 多任务 Hammerspoon menubar 管理器
local menubar = hs.menubar.new()
local tasks = {}  -- 存储所有任务
local currentTaskIndex = nil  -- 当前选中的任务索引
local maxTasks = 20  -- 最大任务数量
local shortcutRunning = false  -- Shortcut是否正在运行

-- 数据持久化文件路径
local dataFile = hs.configdir .. "/tasks_data.json"

-- 获取当前日期字符串
local function getCurrentDate()
    return os.date("%Y-%m-%d")
end

-- 获取当前时间字符串
local function getCurrentTime()
    return os.date("%H:%M")
end

-- 验证日期格式
local function isValidDate(dateStr)
    if not dateStr then return false end
    local year, month, day = dateStr:match("^(%d%d%d%d)-(%d%d)-(%d%d)$")
    if not year then return false end
    year, month, day = tonumber(year), tonumber(month), tonumber(day)
    if not year or not month or not day then return false end
    if month < 1 or month > 12 then return false end
    if day < 1 or day > 31 then return false end
    return true
end

-- 计算评分 (1-5分)
local function calculateScore(task)
    if not task.isDone or task.estimatedTime == 0 then
        return 0
    end

    local timeRatio = task.actualTime / (task.estimatedTime * 40) -- 40分钟为一个单位
    local baseScore = 3 -- 基础分数

    -- 根据时间比例调整分数
    if timeRatio <= 0.8 then
        baseScore = baseScore + 1.5  -- 提前完成
    elseif timeRatio <= 1.0 then
        baseScore = baseScore + 0.5  -- 按时完成
    elseif timeRatio <= 1.2 then
        baseScore = baseScore - 0.5  -- 轻微超时
    else
        baseScore = baseScore - 1.5  -- 严重超时
    end

    -- 确保分数在1-5范围内
    return math.max(1, math.min(5, math.floor(baseScore + 0.5)))
end

-- 启动Shortcut倒计时
local function startShortcutTimer(minutes)
    if shortcutRunning then
        hs.notify.new({
            title = "倒计时提醒",
            informativeText = "倒计时已在运行中",
            withdrawAfter = 3
        }):send()
        return
    end

    shortcutRunning = true

    -- 根据 Shortcut 的要求，使用正确的参数格式
    -- 格式: "timer\n<seconds>" 或 "alarm\n<time>\n[name]"
    local seconds = minutes * 60
    local input = string.format("timer\n%d", seconds)

    -- 使用 shell 命令调用 shortcuts，这样可以传递参数
    local cmd = string.format('shortcuts run "Shrieking Chimes" --input-text "%s"', input)

    hs.task.new("/bin/sh", function(exitCode, stdOut, stdErr)
        shortcutRunning = false
        if exitCode == 0 then
            hs.notify.new({
                title = "倒计时启动",
                informativeText = "已启动 " .. minutes .. " 分钟倒计时",
                withdrawAfter = 3
            }):send()
        else
            -- 如果 shell 命令失败，尝试使用 AppleScript
            local script = string.format([[
                tell application "Shortcuts"
                    run shortcut "Shrieking Chimes" with input "%s"
                end tell
            ]], input)

            hs.osascript.applescript(script, function(success, result, descriptor)
                if success then
                    hs.notify.new({
                        title = "倒计时启动",
                        informativeText = "已启动 " .. minutes .. " 分钟倒计时 (AppleScript)",
                        withdrawAfter = 3
                    }):send()
                else
                    hs.notify.new({
                        title = "倒计时错误",
                        informativeText = "无法启动 Shrieking Chimes: " .. tostring(stdErr or result),
                        withdrawAfter = 5
                    }):send()
                end
            end)
        end
    end, {"-c", cmd}):start()
end

-- 测试 Shortcut 调用的函数
local function testShortcut()
    hs.notify.new({
        title = "测试开始",
        informativeText = "正在测试 Shrieking Chimes Shortcut (1分钟)...",
        withdrawAfter = 3
    }):send()

    print("开始测试 Shortcut 调用...")
    startShortcutTimer(1) -- 测试1分钟倒计时
end

-- 加载任务数据
local function loadTasks()
    local file = io.open(dataFile, "r")
    if file then
        local content = file:read("*all")
        file:close()
        local success, data = pcall(hs.json.decode, content)
        if success and data then
            tasks = data.tasks or {}
            currentTaskIndex = data.currentTaskIndex
            -- 兼容旧数据，为没有新字段的任务添加默认值
            for i, task in ipairs(tasks) do
                if type(task) == "string" then
                    tasks[i] = {
                        name = task,
                        date = getCurrentDate(),
                        estimatedTime = 1, -- 默认1个E1f
                        actualTime = 0,
                        isDone = false,
                        deletedAt = nil,
                        startTime = nil
                    }
                else
                    task.date = task.date or getCurrentDate()
                    task.estimatedTime = task.estimatedTime or 1
                    task.actualTime = task.actualTime or 0
                    task.isDone = task.isDone or false
                    task.deletedAt = task.deletedAt or nil
                    task.startTime = task.startTime or nil
                end
            end
        end
    end
end

-- 保存任务数据
local function saveTasks()
    local data = {
        tasks = tasks,
        currentTaskIndex = currentTaskIndex
    }
    local file = io.open(dataFile, "w")
    if file then
        file:write(hs.json.encode(data))
        file:close()
    end
end

-- 任务排序函数 (按日期)
local function sortTasks()
    table.sort(tasks, function(a, b)
        if a.isDone ~= b.isDone then
            return not a.isDone  -- 未完成的任务排在前面
        end
        return a.date < b.date
    end)
end

-- 获取活跃任务（未完成的任务）
local function getActiveTasks()
    local activeTasks = {}
    for i, task in ipairs(tasks) do
        if not task.isDone then
            table.insert(activeTasks, {task = task, index = i})
        end
    end
    return activeTasks
end

-- 更新菜单栏显示
local function updateMenubar()
    if menubar then
        local displayText = "无任务"
        if currentTaskIndex and tasks[currentTaskIndex] and not tasks[currentTaskIndex].isDone then
            local task = tasks[currentTaskIndex]

            -- 增加显示长度
            local maxLength = 50
            local taskName = task.name

            -- 简单截取，避免复杂的字符处理
            if string.len(taskName) > maxLength then
                taskName = string.sub(taskName, 1, maxLength - 3) .. "..."
            end

            displayText = taskName
        end

        -- 使用更小的字体
        local styledText = hs.styledtext.new(displayText, {
            font = { name = "Helvetica", size = 12 }
        })
        menubar:setTitle(styledText)
    end
end

-- 启动任务
local function startTask()
    if currentTaskIndex and tasks[currentTaskIndex] and not tasks[currentTaskIndex].startTime then
        tasks[currentTaskIndex].startTime = os.time()
        saveTasks()

        -- 启动Shortcut倒计时
        local totalMinutes = tasks[currentTaskIndex].estimatedTime * 40
        startShortcutTimer(totalMinutes)

        hs.notify.new({
            title = "任务开始",
            informativeText = "任务 \"" .. tasks[currentTaskIndex].name .. "\" 已开始",
            withdrawAfter = 3
        }):send()
    end
end

-- 停止任务并记录实际时间
local function stopTask()
    if currentTaskIndex and tasks[currentTaskIndex] and tasks[currentTaskIndex].startTime then
        local elapsed = os.time() - tasks[currentTaskIndex].startTime
        tasks[currentTaskIndex].actualTime = math.floor(elapsed / 60) -- 转换为分钟
        saveTasks()
    end
end

-- 添加新任务（分步对话框）
local function addTask()
    local activeTasks = getActiveTasks()
    if #activeTasks >= maxTasks then
        hs.notify.new({
            title = "任务管理器",
            informativeText = "活跃任务数量已达上限 (" .. maxTasks .. ")",
            withdrawAfter = 5
        }):send()
        return
    end

    -- 第一步：获取任务名称
    local button, taskName = hs.dialog.textPrompt(
        "添加新任务 - 步骤 1/3",
        "请输入任务名称:",
        "",
        "下一步",
        "取消"
    )
    if button ~= "下一步" or not taskName or taskName == "" then
        return
    end

    -- 第二步：获取日期
    local button2, dateStr = hs.dialog.textPrompt(
        "添加新任务 - 步骤 2/3",
        "请输入日期 (格式: YYYY-MM-DD):",
        getCurrentDate(),
        "下一步",
        "取消"
    )
    if button2 ~= "下一步" then
        return
    end

    if not isValidDate(dateStr) then
        hs.notify.new({
            title = "输入错误",
            informativeText = "日期格式错误，请使用 YYYY-MM-DD 格式",
            withdrawAfter = 5
        }):send()
        return
    end

    -- 第三步：获取预计耗时
    local button3, estimatedStr = hs.dialog.textPrompt(
        "添加新任务 - 步骤 3/3",
        "请输入预计耗时 (几个E1f，每个E1f=40分钟):",
        "1",
        "完成",
        "取消"
    )
    if button3 ~= "完成" then
        return
    end

    local estimatedTime = tonumber(estimatedStr) or 1
    if estimatedTime < 1 then
        estimatedTime = 1
    end

    -- 创建新任务
    local newTask = {
        name = taskName,
        date = dateStr,
        estimatedTime = estimatedTime,
        actualTime = 0,
        isDone = false,
        deletedAt = nil,
        startTime = nil
    }

    table.insert(tasks, newTask)
    sortTasks()

    -- 找到新任务的索引并设为当前任务
    for i, task in ipairs(tasks) do
        if task == newTask then
            currentTaskIndex = i
            break
        end
    end

    -- 立即启动任务
    startTask()

    -- 启动对应的倒计时
    local countdownMinutes = calculateCountdownTime(newTask)
    startShortcutTimer(countdownMinutes)

    updateMenubar()
    saveTasks()

    hs.notify.new({
        title = "任务管理器",
        informativeText = "任务已添加并开始计时 (倒计时: " .. countdownMinutes .. "分钟)",
        withdrawAfter = 3
    }):send()
end

-- 编辑任务（分步对话框）
local function editTask(index)
    if not tasks[index] or tasks[index].isDone then return end

    local task = tasks[index]

    -- 第一步：编辑任务名称
    local button, newName = hs.dialog.textPrompt(
        "编辑任务 - 步骤 1/3",
        "修改任务名称:",
        task.name,
        "下一步",
        "取消"
    )
    if button ~= "下一步" then return end

    if not newName or newName == "" then
        hs.notify.new({
            title = "输入错误",
            informativeText = "任务名称不能为空",
            withdrawAfter = 3
        }):send()
        return
    end

    -- 第二步：编辑日期
    local button2, newDate = hs.dialog.textPrompt(
        "编辑任务 - 步骤 2/3",
        "修改日期 (格式: YYYY-MM-DD):",
        task.date,
        "下一步",
        "取消"
    )
    if button2 ~= "下一步" then return end

    if not isValidDate(newDate) then
        hs.notify.new({
            title = "输入错误",
            informativeText = "日期格式错误",
            withdrawAfter = 3
        }):send()
        return
    end

    -- 第三步：编辑预计耗时
    local button3, estimatedStr = hs.dialog.textPrompt(
        "编辑任务 - 步骤 3/3",
        "修改预计耗时 (几个E1f):",
        tostring(task.estimatedTime),
        "完成",
        "取消"
    )
    if button3 ~= "完成" then return end

    local newEstimatedTime = tonumber(estimatedStr) or task.estimatedTime
    if newEstimatedTime < 1 then
        newEstimatedTime = 1
    end

    -- 更新任务
    local oldEstimatedTime = task.estimatedTime
    task.name = newName
    task.date = newDate
    task.estimatedTime = newEstimatedTime

    sortTasks()

    -- 重新找到任务索引
    local newIndex = index
    for i, t in ipairs(tasks) do
        if t == task then
            newIndex = i
            if currentTaskIndex == index then
                currentTaskIndex = i
            end
            break
        end
    end

    -- 如果这是当前任务且预计时间发生了变化，更新倒计时
    if currentTaskIndex == newIndex and oldEstimatedTime ~= newEstimatedTime then
        local countdownMinutes = calculateCountdownTime(task)
        startShortcutTimer(countdownMinutes)

        hs.notify.new({
            title = "任务已更新",
            informativeText = "预计时间已更新，倒计时重新设置为 " .. countdownMinutes .. " 分钟",
            withdrawAfter = 3
        }):send()
    else
        hs.notify.new({
            title = "任务管理器",
            informativeText = "任务已更新",
            withdrawAfter = 3
        }):send()
    end

    updateMenubar()
    saveTasks()
end

-- 完成任务（逻辑删除）
local function completeTask(index)
    if not tasks[index] or tasks[index].isDone then return end

    local task = tasks[index]
    local button = hs.dialog.blockAlert(
        "完成任务",
        "确定要完成任务 \"" .. task.name .. "\" 吗？",
        "完成",
        "取消"
    )
    if button == "完成" then
        stopTask()
        task.isDone = true
        task.deletedAt = getCurrentTime()

        -- 如果这是当前任务，清除当前任务索引
        if currentTaskIndex == index then
            currentTaskIndex = nil
            -- 尝试选择下一个活跃任务
            local activeTasks = getActiveTasks()
            if #activeTasks > 0 then
                for i, activeTask in ipairs(activeTasks) do
                    if activeTask.index ~= index then
                        currentTaskIndex = activeTask.index
                        break
                    end
                end
            end
        end

        updateMenubar()
        saveTasks()
        hs.notify.new({
            title = "任务完成",
            informativeText = "任务已完成！评分: " .. calculateScore(task) .. "/5",
            withdrawAfter = 5
        }):send()
    end
end

-- 删除任务（真删除）
local function deleteTask(index)
    if not tasks[index] then return end

    local task = tasks[index]
    local button = hs.dialog.blockAlert(
        "删除任务",
        "确定要删除任务 \"" .. task.name .. "\" 吗？\n注意：此操作不可恢复！",
        "删除",
        "取消"
    )
    if button == "删除" then
        -- 如果删除的是当前任务，停止任务
        if currentTaskIndex == index then
            stopTask()
            currentTaskIndex = nil
        elseif currentTaskIndex and currentTaskIndex > index then
            currentTaskIndex = currentTaskIndex - 1
        end

        table.remove(tasks, index)

        -- 尝试选择下一个活跃任务
        if not currentTaskIndex then
            local activeTasks = getActiveTasks()
            if #activeTasks > 0 then
                currentTaskIndex = activeTasks[1].index
            end
        end

        updateMenubar()
        saveTasks()
        hs.notify.new({
            title = "任务管理器",
            informativeText = "任务已删除",
            withdrawAfter = 3
        }):send()
    end
end

-- 选择任务作为当前任务
local function selectTask(index)
    if not tasks[index] or tasks[index].isDone then return end

    -- 如果有正在进行的任务，停止任务
    if currentTaskIndex and tasks[currentTaskIndex] and not tasks[currentTaskIndex].isDone then
        stopTask()
    end

    currentTaskIndex = index
    startTask()

    -- 计算并启动对应的倒计时
    local countdownMinutes = calculateCountdownTime(tasks[index])
    startShortcutTimer(countdownMinutes)

    updateMenubar()
    saveTasks()

    hs.notify.new({
        title = "当前任务",
        informativeText = "已设置: " .. tasks[index].name .. " (倒计时: " .. countdownMinutes .. "分钟)",
        withdrawAfter = 3
    }):send()
end

-- 计算当前任务应该启动的倒计时时间
local function calculateCountdownTime(task)
    if not task or not task.startTime then
        return task.estimatedTime * 40 -- 如果没有开始时间，返回完整的预计时间
    end

    local elapsed = os.time() - task.startTime
    local elapsedMinutes = math.floor(elapsed / 60)
    local plannedMinutes = task.estimatedTime * 40

    if elapsedMinutes < plannedMinutes then
        -- AD < PD: countdown = PD - AD
        return plannedMinutes - elapsedMinutes
    else
        -- AD >= PD: 自动续期，重置为一个E1f (40分钟)
        return 40
    end
end

-- 自动续期当前任务
local function autoExtendCurrentTask()
    if not currentTaskIndex or not tasks[currentTaskIndex] or tasks[currentTaskIndex].isDone then
        return
    end

    local task = tasks[currentTaskIndex]
    if not task.startTime then
        return
    end

    local elapsed = os.time() - task.startTime
    local elapsedMinutes = math.floor(elapsed / 60)
    local plannedMinutes = task.estimatedTime * 40

    if elapsedMinutes >= plannedMinutes then
        -- 超时了，自动续期
        task.actualTime = elapsedMinutes -- 更新实际耗时

        -- 启动新的40分钟倒计时
        startShortcutTimer(40)

        hs.notify.new({
            title = "任务自动续期",
            informativeText = "任务已超时，自动续期40分钟",
            withdrawAfter = 3
        }):send()

        saveTasks()
    end
end

-- 导出某日已完成任务
local function exportCompletedTasks()
    local button, dateStr = hs.dialog.textPrompt(
        "导出已完成任务",
        "请输入要导出的日期 (格式: YYYY-MM-DD):",
        getCurrentDate(),
        "导出",
        "取消"
    )
    if button ~= "导出" then return end

    if not isValidDate(dateStr) then
        hs.notify.new({
            title = "输入错误",
            informativeText = "日期格式错误",
            withdrawAfter = 3
        }):send()
        return
    end

    local completedTasks = {}
    for _, task in ipairs(tasks) do
        if task.isDone and task.date == dateStr then
            table.insert(completedTasks, task)
        end
    end

    if #completedTasks == 0 then
        hs.notify.new({
            title = "导出结果",
            informativeText = "该日期没有已完成的任务",
            withdrawAfter = 3
        }):send()
        return
    end

    -- 按完成时间排序 (deletedAt 升序)
    table.sort(completedTasks, function(a, b)
        local timeA = a.deletedAt or "0000-00-00 00:00:00"
        local timeB = b.deletedAt or "0000-00-00 00:00:00"
        return timeA < timeB
    end)

    -- 生成YAML格式
    local yaml = "- date: " .. dateStr .. "\n  task:\n"
    for _, task in ipairs(completedTasks) do
        yaml = yaml .. "    - name: " .. task.name .. "\n"
        if task.deletedAt then
            yaml = yaml .. "      deletedAt: " .. task.deletedAt .. "\n"
        end
        if task.estimatedTime and task.estimatedTime > 0 then
            yaml = yaml .. "      PD: " .. (task.estimatedTime * 40) .. "min\n"
        end
        if task.actualTime and task.actualTime > 0 then
            yaml = yaml .. "      AD: " .. task.actualTime .. "min\n"
        end
        local score = calculateScore(task)
        if score > 0 then
            yaml = yaml .. "      score: " .. score .. "\n"
        end
        yaml = yaml .. "\n"
    end

    -- 复制到剪贴板
    hs.pasteboard.setContents(yaml)
    hs.notify.new({
        title = "导出完成",
        informativeText = "已导出 " .. #completedTasks .. " 个任务到剪贴板",
        withdrawAfter = 5
    }):send()
end

-- 创建菜单项
local function createMenu()
    local menu = {}
    local activeTasks = getActiveTasks()

    -- 当前任务显示
    if currentTaskIndex and tasks[currentTaskIndex] and not tasks[currentTaskIndex].isDone then
        local task = tasks[currentTaskIndex]

        table.insert(menu, {
            title = "当前: " .. task.name,
            disabled = true
        })

        table.insert(menu, { title = "-" })
    end

    -- 活跃任务列表
    if #activeTasks > 0 then
        table.insert(menu, {
            title = "活跃任务 (" .. #activeTasks .. "/" .. maxTasks .. ")",
            disabled = true
        })

        for _, activeTask in ipairs(activeTasks) do
            local task = activeTask.task
            local index = activeTask.index
            local prefix = (index == currentTaskIndex) and "● " or "○ "

            -- 增加显示长度
            local maxLength = 60  -- 进一步增加长度
            local displayTask = task.name
            if string.len(displayTask) > maxLength then
                displayTask = string.sub(displayTask, 1, maxLength - 3) .. "..."
            end

            local taskTitle = prefix .. displayTask
            if task.date ~= getCurrentDate() then
                taskTitle = taskTitle .. " (" .. task.date .. ")"
            end

            table.insert(menu, {
                title = taskTitle,
                menu = {
                    {
                        title = "选为当前任务",
                        fn = function() selectTask(index) end
                    },
                    {
                        title = "编辑任务",
                        fn = function() editTask(index) end
                    },
                    {
                        title = "完成任务",
                        fn = function() completeTask(index) end
                    },
                    {
                        title = "删除任务",
                        fn = function() deleteTask(index) end
                    }
                }
            })
        end
        table.insert(menu, { title = "-" })
    end

    -- 操作选项
    table.insert(menu, {
        title = "➕ 添加新任务",
        fn = addTask
    })

    table.insert(menu, {
        title = "📤 导出已完成任务",
        fn = exportCompletedTasks
    })

    table.insert(menu, {
        title = "🧪 测试 Shortcut",
        fn = testShortcut
    })

    table.insert(menu, { title = "-" })

    -- 显示已完成任务数量
    local completedCount = 0
    for _, task in ipairs(tasks) do
        if task.isDone then
            completedCount = completedCount + 1
        end
    end

    if completedCount > 0 then
        table.insert(menu, {
            title = "已完成任务: " .. completedCount,
            disabled = true
        })
        table.insert(menu, { title = "-" })
    end

    table.insert(menu, {
        title = "退出",
        fn = function()
            menubar:delete()
            menubar = nil
        end
    })

    return menu
end

-- 设置菜单
menubar:setMenu(createMenu)

-- 点击菜单栏图标时快速添加任务
menubar:setClickCallback(function()
    addTask()
end)

-- 初始化
loadTasks()
sortTasks()
updateMenubar()

-- 如果有活跃任务但没有当前任务，选择第一个活跃任务
if not currentTaskIndex then
    local activeTasks = getActiveTasks()
    if #activeTasks > 0 then
        currentTaskIndex = activeTasks[1].index
    end
end

-- 如果有当前任务，启动任务
if currentTaskIndex and tasks[currentTaskIndex] and not tasks[currentTaskIndex].isDone then
    -- 如果任务还没有开始时间，则启动任务
    if not tasks[currentTaskIndex].startTime then
        startTask()
    end

    -- 启动对应的倒计时
    local countdownMinutes = calculateCountdownTime(tasks[currentTaskIndex])
    startShortcutTimer(countdownMinutes)
end

-- 设置定时器，每分钟检查一次是否需要自动续期
local autoExtendTimer = hs.timer.new(60, function()
    autoExtendCurrentTask()
end)
autoExtendTimer:start()

hs.notify.new({
    title = "任务管理器",
    informativeText = "多任务管理器已启动",
    withdrawAfter = 3
}):send()
