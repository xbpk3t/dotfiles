---
# Categraf Agent 部署配置
# 多功能指标收集器

apiVersion: v1
kind: ServiceAccount
metadata:
  name: categraf
  namespace: monitoring
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: categraf
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/metrics
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
  - apiGroups: ["networking.k8s.io"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: categraf
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: categraf
subjects:
  - kind: ServiceAccount
    name: categraf
    namespace: monitoring

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: categraf
  namespace: monitoring
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: categraf
      app.kubernetes.io/component: metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: categraf
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: pag
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: categraf
      hostNetwork: true
      hostPID: true
      containers:
        - name: categraf
          image: "flashcatcloud/categraf:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 9100
              protocol: TCP
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PROMETHEUS_URL
              value: "http://prometheus-operator-kube-p-prometheus.monitoring.svc.cluster.local:9090"
            - name: NIGHTINGALE_URL
              value: "http://nightingale:8000"
            - name: LOG_LEVEL
              value: "info"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9100
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9100
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          volumeMounts:
            - name: categraf-config
              mountPath: /etc/categraf
              readOnly: true
            - name: proc
              mountPath: /host/proc
              readOnly: true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: rootfs
              mountPath: /rootfs
              readOnly: true
            - name: docker-sock
              mountPath: /var/run/docker.sock
              readOnly: true
      volumes:
        - name: categraf-config
          configMap:
            name: categraf-config
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: rootfs
          hostPath:
            path: /
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      nodeSelector:
        kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: categraf
  namespace: monitoring
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
    prometheus.io/path: "/metrics"
spec:
  ports:
    - name: metrics
      port: 9100
      targetPort: 9100
      protocol: TCP
  selector:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
  type: ClusterIP
  clusterIP: None

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: categraf-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: categraf
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: pag
data:
  config.toml: |
    # Categraf Configuration for Development

    [global]
    # Global configuration
    hostname = "$HOSTNAME"
    # Enable metrics collection
    enable_metrics = true
    # Enable logging
    enable_logging = true
    # Log level: debug, info, warn, error
    log_level = "info"
    # Log format: text or json
    log_format = "json"
    # Metrics interval (seconds)
    interval = 15
    # Batch size for metrics
    batch_size = 1000
    # Flush interval (seconds)
    flush_interval = 10

    [writers]
    # Writers configuration
    [[writers.prometheus]]
      # Prometheus remote write
      enabled = true
      url = "http://prometheus-operator-kube-p-prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      # Batch settings
      batch_size = 1000
      batch_timeout = "10s"
      # Retry settings
      max_retries = 3
      retry_interval = "5s"

    [[writers.nightingale]]
      # Nightingale writer
      enabled = true
      url = "http://nightingale:8000/api/n9e/metrics"
      # Authentication
      auth_token = ""
      # Batch settings
      batch_size = 500
      batch_timeout = "10s"

    [inputs]
    # Input plugins configuration

    # System metrics
    [inputs.cpu]
      enabled = true
      # CPU metrics collection
      percpu = true
      totalcpu = true
      collect_cpu_time = false

    [inputs.mem]
      enabled = true
      # Memory metrics collection

    [inputs.disk]
      enabled = true
      # Disk metrics collection
      mount_points = ["/"]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
      field_pass = ["total", "used", "free", "used_percent", "inodes_total", "inodes_used", "inodes_free"]

    [inputs.diskio]
      enabled = true
      # Disk I/O metrics collection

    [inputs.net]
      enabled = true
      # Network metrics collection
      interfaces = ["*"]
      field_pass = ["bytes_sent", "bytes_recv", "packets_sent", "packets_recv", "err_in", "err_out", "drop_in", "drop_out"]

    [inputs.kernel]
      enabled = true
      # Kernel metrics collection

    [inputs.processes]
      enabled = true
      # Process metrics collection

    [inputs.system]
      enabled = true
      # System metrics collection

    # Docker metrics
    [inputs.docker]
      enabled = true
      # Docker container metrics
      endpoint = "unix:///var/run/docker.sock"
      gather_services = false
      gather_network_stats = true
      perdevice = true
      total = false
      tag_env = ["JAVA_HOME", "LEIN_JAVA_CMD", "JAVA_OPTS"]

    # Kubernetes metrics
    [inputs.kubernetes]
      enabled = true
      # Kubernetes metrics collection
      url = "https://$HOSTIP:10250"
      bearer_token = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      insecure_skip_verify = true
      include_namespace = true
      include_labels = true
      include_annotations = true

    # MySQL metrics
    [inputs.mysql]
      enabled = true
      # MySQL metrics collection
      servers = ["pag_user:pag_password@tcp(mysql:3306)/pag_dev"]
      gather_global_status = true
      gather_innodb_metrics = true
      gather_process_list = true
      gather_user_statistics = true
      gather_info_schema_auto_inc = true
      gather_slave_status = false
      gather_binary_logs = false
      gather_table_io_waits = false
      gather_table_lock_waits = false
      gather_index_io_waits = false
      gather_event_waits = false
      gather_file_events_stats = false
      gather_perf_events_statements = false
      perf_events_statements_digest_text_limit = 120
      perf_events_statements_limit = 250
      perf_events_statements_time_limit = 86400
      interval_slow = "30m"

    # Application metrics
    [inputs.http_response]
      enabled = true
      # HTTP response metrics
      urls = [
        "http://prometheus-operator-grafana.monitoring.svc.cluster.local:80/api/health",
        "http://nightingale:8000/api/n9e/health",
        "http://mysql:3306"
      ]
      method = "GET"
      timeout = "5s"
      response_header_timeout = "5s"
      follow_redirects = false
      response_string_match = "OK|200|healthy"

    # Log monitoring
    [inputs.logparser]
      enabled = true
      # Log parsing metrics
      files = [
        "/var/log/*.log",
        "/var/log/*/*.log"
      ]
      from_beginning = false
      watch_method = "inotify"
      log_level = ["error", "warn", "info", "debug"]
      parse_method = "grok"
      patterns = [
        "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}",
        "%{DATESTAMP:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}"
      ]

    # Custom metrics
    [inputs.exec]
      enabled = true
      # Custom command execution metrics
      commands = [
        ["bash", "-c", "echo 'custom_metric 1 $(date +%s)'"],
        ["bash", "-c", "df -h | grep '/' | awk '{print $5}' | sed 's/%//'"]
      ]
      timeout = "10s"
      data_format = "influx"

    [development]
    # Development-specific settings
    debug_mode = true
    enable_test_metrics = true
    mock_external_services = true
    log_verbose = true
    # Enable all input plugins for development
    enable_all_inputs = true
