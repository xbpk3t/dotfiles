---
# Nightingale (n9e) 部署配置
# 告警管理和可视化平台

apiVersion: v1
kind: Service
metadata:
  name: nightingale
  namespace: monitoring
  labels:
    app.kubernetes.io/name: nightingale
    app.kubernetes.io/component: alerting
    app.kubernetes.io/part-of: pag
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/api/n9e/metrics"
spec:
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    app.kubernetes.io/name: nightingale
    app.kubernetes.io/component: alerting
  type: LoadBalancer
  sessionAffinity: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nightingale
  namespace: monitoring
  labels:
    app.kubernetes.io/name: nightingale
    app.kubernetes.io/component: alerting
    app.kubernetes.io/part-of: pag
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nightingale
      app.kubernetes.io/component: alerting
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nightingale
        app.kubernetes.io/component: alerting
        app.kubernetes.io/part-of: pag
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/n9e/metrics"
    spec:
      containers:
        - name: nightingale
          image: "flashcatcloud/nightingale:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: GIN_MODE
              value: "release"
            - name: DB_ENDPOINT
              value: "mysql:3306"
            - name: DB_USER
              value: "pag_user"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-credentials
                  key: user-password
            - name: DB_DATABASE
              value: "n9e_v6"
            - name: ENABLE_DB_INDEX
              value: "true"
            - name: LOG_LEVEL
              value: "info"
            - name: ENABLE_METRICS
              value: "true"
            - name: METRICS_PORT
              value: "8000"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /api/n9e/health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/n9e/health
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          volumeMounts:
            - name: nightingale-config
              mountPath: /etc/n9e
              readOnly: true
            - name: nightingale-logs
              mountPath: /var/log/n9e
      volumes:
        - name: nightingale-config
          configMap:
            name: nightingale-config
        - name: nightingale-logs
          emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nightingale-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: nightingale
    app.kubernetes.io/component: alerting
    app.kubernetes.io/part-of: pag
data:
  config.toml: |
    # Nightingale Configuration for Development

    [http]
    # HTTP server configuration
    listen = "0.0.0.0:8000"
    # Enable CORS
    enable_cors = true
    # CORS allowed origins
    cors_allow_origins = ["*"]
    # Read timeout (seconds)
    read_timeout = 10
    # Write timeout (seconds)
    write_timeout = 10
    # Idle timeout (seconds)
    idle_timeout = 60

    [database]
    # Database configuration
    host = "mysql"
    port = 3306
    user = "pag_user"
    password = "pag_password"
    database = "n9e_v6"
    # Connection pool settings
    max_open_conns = 100
    max_idle_conns = 10
    conn_max_lifetime = 3600
    # Enable database index creation
    enable_index = true

    [logging]
    # Logging configuration
    level = "info"
    # Log format: text or json
    format = "json"
    # Log file path (empty for stdout)
    file = ""
    # Maximum log file size (MB)
    max_size = 100
    # Maximum number of old log files to retain
    max_backups = 10
    # Maximum age of log files to retain
    max_age = 30

    [metrics]
    # Metrics configuration
    enabled = true
    path = "/api/n9e/metrics"
    # Metrics port (if different from http port)
    port = 8000
    # Enable detailed metrics
    detailed = true

    [alerting]
    # Alerting configuration
    enable_alerts = true
    # Alert evaluation interval (seconds)
    evaluation_interval = 15
    # Alert resolve timeout (seconds)
    resolve_timeout = 300
    # Enable alert suppression
    enable_suppression = true

    [auth]
    # Authentication configuration
    enable_auth = false  # Disabled for development
    # Session timeout (seconds)
    session_timeout = 3600
    # Enable anonymous access
    anonymous_access = true

    [prometheus]
    # Prometheus integration
    enable_prometheus = true
    # Prometheus server URL
    prometheus_url = "http://prometheus-operator-kube-p-prometheus.monitoring.svc.cluster.local:9090"
    # Query timeout (seconds)
    query_timeout = 30
    # Maximum query time range (hours)
    max_query_range = 168

    [storage]
    # Storage configuration
    # Alert retention period (days)
    alert_retention_days = 30
    # Metric retention period (days)
    metric_retention_days = 15
    # Log retention period (days)
    log_retention_days = 7

    [notification]
    # Notification configuration
    enable_email = false
    enable_webhook = true
    enable_slack = false
    enable_dingtalk = false
    # Default notification channels
    default_channels = ["webhook"]
    # Webhook URLs for notifications
    webhook_urls = [
      "http://localhost:5001/notify"
    ]

    [cluster]
    # Cluster configuration (for HA)
    cluster_mode = false
    # Cluster name
    cluster_name = "dev-cluster"
    # Node ID (auto-generated if empty)
    node_id = ""
    # Other nodes in cluster
    cluster_nodes = []

    [development]
    # Development-specific settings
    debug_mode = true
    enable_swagger = true
    enable_debug_endpoints = true
    # Enable test data
    enable_test_data = true
    # Mock external services
    mock_external_services = true
