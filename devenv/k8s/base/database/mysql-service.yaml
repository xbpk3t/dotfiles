apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: monitoring
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: pag
spec:
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
  type: LoadBalancer
  sessionAffinity: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: monitoring
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: pag
spec:
  serviceName: mysql
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: pag
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9104"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
            - name: metrics
              containerPort: 9104
              protocol: TCP
          env:
            - name: MYSQL_ROOT_HOST
              value: "%"
            - name: MYSQL_DATABASE
              value: "pag_dev"
            - name: MYSQL_USER
              value: "pag_user"
            - name: MYSQL_INITDB_SKIP_TZINFO
              value: "1"
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: mysql-config
              mountPath: /etc/mysql/conf.d/my.cnf
              subPath: my.cnf
            - name: mysql-config
              mountPath: /docker-entrypoint-initdb.d/init.sql
              subPath: init.sql
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3

        - name: mysql-exporter
          image: prom/mysqld-exporter:v0.14.0
          ports:
            - name: metrics
              containerPort: 9104
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
              value: "monitoring:monitoring_password@(localhost:3306)/pag_dev"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9104
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9104
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3

      volumes:
        - name: mysql-config
          configMap:
            name: mysql-config

  volumeClaimTemplates:
    - metadata:
        name: mysql-data
        labels:
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: database
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: standard
        resources:
          requests:
            storage: 10Gi
