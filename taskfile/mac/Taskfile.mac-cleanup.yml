---
# ref [mac-cleanup/mac-cleanup-py: 👨‍💻 Python cleanup script for macOS](https://github.com/mac-cleanup/mac-cleanup-py)

version: '3'

vars:
  SERVICES: &SERVICES
    - trash
    - system_caches
    - system_log
    - jetbrains
    - adobe
    - chrome
    - ios_apps
    - ios_backups
    - xcode
    - dropbox
    - google_drive
    - composer
    - steam
    - minecraft
    - lunarclient
    - wget_logs
    - cacher
    - android
    - gradle
    - kite
    - gem
    - docker
    - pyenv
    - npm
    - pnpm
    - yarn
    - bun
    - pod
    - go
    - microsoft_teams
    - poetry
    - java_cache
    - dns_cache
    - inactive_memory
    # - telegram
    - conan
    - nuget_cache
    - obsidian_caches
    - ea_caches
    - chromium_caches
    - arc
    - podman
    - rancher


  SERVICES_CMD:
    map:
      google_drive: killall 'Google Drive File Stream' 2>/dev/null || true
      composer: composer clearcache --no-interaction
      gem: gem cleanup
      docker: CLOSE_DOCKER=false && if ! docker ps >/dev/null 2>&1; then open -jga Docker && CLOSE_DOCKER=true && sleep 5; fi && docker system prune -af && if [ "$CLOSE_DOCKER" = true ]; then killall Docker 2>/dev/null || true; fi
      npm: npm cache clean --force
      pnpm: pnpm store prune &>/dev/null
      yarn: yarn cache clean --force
      bun: bun pm cache rm
      pod: pod cache clean --all
      go: go clean -modcache
      dns_cache: sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder
      inactive_memory: sudo purge
      conan: conan remove "*" -c



  # File paths for each cleanup task
  trash:
    - "/Volumes/*/.Trashes/*"
    - "~/.Trash/*"

  system_caches:
    - "~/Library/Caches/*"
    - "/private/var/folders/bh/*/*/*/*"

  system_log:
    - "/private/var/log/asl/*.asl"
    - "/Library/Logs/DiagnosticReports/*"
    - "/Library/Logs/CreativeCloud/*"
    - "/Library/Logs/Adobe/*"
    - "/Library/Logs/adobegc.log"
    - "~/Library/Containers/com.apple.mail/Data/Library/Logs/Mail/*"
    - "~/Library/Logs/CoreSimulator/*"

  jetbrains:
    - "~/Library/Logs/JetBrains/*/"

  adobe:
    - "~/Library/Application Support/Adobe/Common/Media Cache Files/*"

  chrome:
    - "~/Library/Application Support/Google/Chrome/Default/Application Cache/*"

  ios_apps:
    - "~/Music/iTunes/iTunes Media/Mobile Applications/*"

  ios_backups:
    - "~/Library/Application Support/MobileSync/Backup/*"

  xcode:
    - "~/Library/Developer/Xcode/DerivedData/*"
    - "~/Library/Developer/Xcode/Archives/*"
    - "~/Library/Developer/Xcode/iOS Device Logs/*"

  dropbox:
    - "~/Dropbox/.dropbox.cache/*"

  google_drive:
    - "~/Library/Application Support/Google/DriveFS/[0-9a-zA-Z]*/content_cache"

  composer:
    - "~/Library/Caches/composer"

  steam:
    - "~/Library/Application Support/Steam/appcache"
    - "~/Library/Application Support/Steam/depotcache"
    - "~/Library/Application Support/Steam/logs"
    - "~/Library/Application Support/Steam/steamapps/shadercache"
    - "~/Library/Application Support/Steam/steamapps/temp"

  minecraft:
    - "~/Library/Application Support/minecraft/logs"
    - "~/Library/Application Support/minecraft/crash-reports"
    - "~/Library/Application Support/minecraft/webcache"
    - "~/Library/Application Support/minecraft/webcache2"
    - "~/Library/Application Support/minecraft/*.log"
    - "~/Library/Application Support/minecraft/launcher_cef_log.txt"
    - "~/Library/Application Support/minecraft/command_history.txt"
    - "~/Library/Application Support/minecraft/.mixin.out"

  lunarclient:
    - "~/.lunarclient/game-cache"
    - "~/.lunarclient/launcher-cache"
    - "~/.lunarclient/logs"
    - "~/.lunarclient/offline/*/logs"
    - "~/.lunarclient/offline/files/*/logs"

  wget_logs:
    - "~/wget-log"
    - "~/.wget-hsts"

  cacher:
    - "~/.cacher/logs"

  android:
    - "~/.android/cache"

  gradle:
    - "~/.gradle/caches"

  kite:
    - "~/.kite/logs"

  pyenv:
    - "$PYENV_VIRTUALENV_CACHE_PATH"

  npm:
    - "~/.npm/*"

  pnpm:
    - "~/.pnpm-store/*"

  yarn:
    - "~/Library/Caches/yarn"
    - "~/Library/Caches/Yarn"

  bun:
    - "~/.bun/install/cache"

  pod:
    - "~/Library/Caches/CocoaPods"

  go:
    - "~/go/pkg/mod"

  microsoft_teams:
    - "~/Library/Application Support/Microsoft/Teams/IndexedDB"
    - "~/Library/Application Support/Microsoft/Teams/Cache"
    - "~/Library/Application Support/Microsoft/Teams/Application Cache"
    - "~/Library/Application Support/Microsoft/Teams/Code Cache"
    - "~/Library/Application Support/Microsoft/Teams/blob_storage"
    - "~/Library/Application Support/Microsoft/Teams/databases"
    - "~/Library/Application Support/Microsoft/Teams/gpucache"
    - "~/Library/Application Support/Microsoft/Teams/Local Storage"
    - "~/Library/Application Support/Microsoft/Teams/tmp"
    - "~/Library/Application Support/Microsoft/Teams/*logs*.txt"
    - "~/Library/Application Support/Microsoft/Teams/watchdog"
    - "~/Library/Application Support/Microsoft/Teams/*watchdog*.json"

  poetry:
    - "~/Library/Caches/pypoetry"

  java_cache:
    - "~/*.hprof"

  conan:
    - "~/.conan2/p/"

  nuget_cache:
    - "~/.nuget/packages/"

  obsidian_caches:
    - "~/Library/Application Support/obsidian/Cache/"
    - "~/Library/Application Support/obsidian/Code Cache/"
    - "~/Library/Application Support/obsidian/DawnGraphiteCache/"
    - "~/Library/Application Support/obsidian/DawnWebGPUCache/"
    - "~/Library/Application Support/obsidian/*.log"

  ea_caches:
    - "~/Library/Application Support/Electronic Arts/EA app/IGOCache/"
    - "~/Library/Application Support/Electronic Arts/EA app/Logs/"
    - "~/Library/Application Support/Electronic Arts/EA app/OfflineCache/"
    - "~/Library/Application Support/Electronic Arts/EA app/CEF/BrowserCache/EADesktop/Cache/"
    - "~/Library/Application Support/Electronic Arts/EA app/CEF/BrowserCache/EADesktop/Code Cache/"
    - "~/Library/Application Support/Electronic Arts/EA app/CEF/BrowserCache/EADesktop/DawnCache/"
    - "~/Library/Application Support/Electronic Arts/EA app/CEF/BrowserCache/EADesktop/GPUCache/"

  chromium_caches:
    - "~/Library/Application Support/Chromium/"
    - "~/Library/Application Support/Chromium/GraphiteDawnCache/"
    - "~/Library/Application Support/Chromium/GrShaderCache/"
    - "~/Library/Application Support/Chromium/ShaderCache/"
    - "~/Library/Application Support/Chromium/Default/DawnCache/"
    - "~/Library/Application Support/Chromium/Default/GPUCache/"

  arc:
    - "~/Library/Caches/Arc"
    - "~/Library/Caches/CloudKit/company.thebrowser.Browser"
    - "~/Library/Caches/company.thebrowser.Browser"
    - "~/Library/Application Support/Arc/User Data/Default/History"
    - "~/Library/Application Support/Arc/User Data/Default/History-journal"
    - "~/Library/Application Support/Arc/User Data/Default/Cookies"
    - "~/Library/Application Support/Arc/User Data/Default/Cookies-journal"
    - "~/Library/Application Support/Arc/User Data/Default/Web Data"
    - "~/Library/Application Support/Arc/User Data/Default/Web Data-journal"

  podman:
    - "~/.config/containers/"
    - "~/Library/Caches/containers/"

  rancher:
    - "~/Library/Caches/rancher-desktop"

tasks:
  default:
    silent: true
    desc: "Run cleanup for all services"
    vars:
      SERVICES: *SERVICES
    cmds:
      - for:
          var: SERVICES
        task: files
        vars:
          SERVICE: '{{.ITEM}}'

      - for:
          var: SERVICES_CMD
        task: cmds
        vars:
          SERVICE: '{{.ITEM}}'


  files:
    silent: true
    interactive: true
    desc: "Execute cleanup for a specific task"
    preconditions:
      - sh: 'test -n "{{.SERVICES | has .SERVICE}}"'
        msg: "Error: SERVICE is required"
    vars:
      SERVICE: '{{.SERVICE}}'
    cmds:
      - "echo 🔄 Running: {{.SERVICE}}"
      # Remove files if they exist
      - |
        {{range index . .SERVICE}}
        if [ -e "{{.}}" ]; then
          echo "Removing: {{.}}"
          rm -rf "{{.}}"
        else
          echo "[warning] file not exist: {{.}}"
        fi
        {{end}}




      # Execute command if it exists
#      - if: 'has (index .SERVICES_CMD.map) .SERVICE'
#        vars:
#          TASK_CMD: '{{index .SERVICES_CMD.map .SERVICE}}'
#          SPECIAL_CMDS: '["google_drive", "dns_cache", "inactive_memory", "telegram", "docker"]'
#          IS_SPECIAL: '{{has .SPECIAL_CMDS .SERVICE}}'
#        cmd: |
#          if [ "{{.IS_SPECIAL}}" = "true" ]; then
#            echo "Executing special command: {{.TASK_CMD}}"
#            bash -c "{{.TASK_CMD}}"
#          else
#            TOOL_NAME="{{.SERVICE}}"
#            if command -v "$TOOL_NAME" >/dev/null 2>&1; then
#              echo "Executing command: {{.TASK_CMD}}"
#              bash -c "{{.TASK_CMD}}"
#            else
#              echo "Tool $TOOL_NAME not found, skipping command execution"
#            fi
#          fi
#      - if: 'not (has (index .SERVICES_CMD.map) .SERVICE)'
#        cmd: echo "No command defined for {{.SERVICE}}, only file cleanup will be performed"
