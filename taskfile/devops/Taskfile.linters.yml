---

version: '3'

vars:
  # dotfiles中的linters配置路径 (使用绝对路径)
  DOTFILES_LINTERS_DIR: "/Users/lhgtqb7bll/Desktop/dotfiles/.github/linters"
  # 当前项目的工作目录
  CURRENT_PROJECT_DIR: "{{.PWD}}"
  # 支持的linter配置文件列表
  SUPPORTED_LINTERS:
    - golangci-lint.yml
    - markdownlint.yml
    - yamllint.yml
    - cs-fixer.php

tasks:
  default:
    desc: 应用dotfiles的linter配置到当前项目
    cmds:
      - echo "🚀 开始应用linter配置..."
      - task: scan-project
      - task: process-configs
      - echo "✅ linter配置应用完成"
    silent: true
    interactive: true

  # 扫描当前项目的linters配置
  scan-project:
    internal: true
    desc: 扫描当前项目的linter配置
    vars:
      PROJECT_LINTERS_DIR: "{{.CURRENT_PROJECT_DIR}}/.github/linters"
    cmds:
      - |
        echo "🔍 扫描当前项目linter配置..."
        if [ ! -d "{{.PROJECT_LINTERS_DIR}}" ]; then
          echo "📁 当前项目没有.github/linters目录，将创建"
          mkdir -p "{{.PROJECT_LINTERS_DIR}}"
        else
          echo "📁 发现现有linter配置目录"
        fi

  # 处理所有配置文件
  process-configs:
    internal: true
    desc: 处理所有linter配置文件
    deps: [scan-project]
    cmds:
      - task: process-golangci-lint
      - task: process-markdownlint
      - task: process-yamllint
      - task: process-cs-fixer

  # 处理golangci-lint配置文件
  process-golangci-lint:
    internal: true
    desc: 处理golangci-lint配置文件
    vars:
      DOTFILES_CONFIG: "{{.DOTFILES_LINTERS_DIR}}/golangci-lint.yml"
      PROJECT_CONFIG: "{{.CURRENT_PROJECT_DIR}}/.github/linters/golangci-lint.yml"
    cmds:
      - task: process-single-config
        vars:
          LINTER_FILE: golangci-lint.yml

  # 处理markdownlint配置文件
  process-markdownlint:
    internal: true
    desc: 处理markdownlint配置文件
    cmds:
      - task: process-single-config
        vars:
          LINTER_FILE: markdownlint.yml

  # 处理yamllint配置文件
  process-yamllint:
    internal: true
    desc: 处理yamllint配置文件
    cmds:
      - task: process-single-config
        vars:
          LINTER_FILE: yamllint.yml

  # 处理cs-fixer配置文件
  process-cs-fixer:
    internal: true
    desc: 处理cs-fixer配置文件
    cmds:
      - task: process-single-config
        vars:
          LINTER_FILE: cs-fixer.php

  # 处理单个配置文件
  process-single-config:
    internal: true
    desc: 处理单个linter配置文件
    vars:
      DOTFILES_CONFIG: "{{.DOTFILES_LINTERS_DIR}}/{{.LINTER_FILE}}"
      PROJECT_CONFIG: "{{.CURRENT_PROJECT_DIR}}/.github/linters/{{.LINTER_FILE}}"
    cmds:
      - |
        echo "📄 处理 {{.LINTER_FILE}}..."

        # 检查dotfiles中是否存在该配置文件
        if [ ! -f "{{.DOTFILES_CONFIG}}" ]; then
          echo "⚠️  跳过: dotfiles中不存在 {{.LINTER_FILE}}"
        else
          # 检查项目中是否已存在该配置文件
          if [ -f "{{.PROJECT_CONFIG}}" ]; then
            # 文件存在，检查是否相同
            if diff -q "{{.DOTFILES_CONFIG}}" "{{.PROJECT_CONFIG}}" >/dev/null 2>&1; then
              echo "✅ {{.LINTER_FILE}} 已同步，跳过"
            else
              echo "⚠️  {{.LINTER_FILE}} 存在差异"
              /run/current-system/sw/bin/task --taskfile /Users/lhgtqb7bll/Desktop/dotfiles/taskfile/devops/Taskfile.linters.yml handle-conflict LINTER_FILE="{{.LINTER_FILE}}"
            fi
          else
            # 文件不存在，直接复制
            echo "📋 复制 {{.LINTER_FILE}} 到项目"
            cp "{{.DOTFILES_CONFIG}}" "{{.PROJECT_CONFIG}}"
            echo "✅ {{.LINTER_FILE}} 已复制"
          fi
        fi

  # 处理文件冲突
  handle-conflict:
    desc: 处理配置文件冲突
    vars:
      DOTFILES_CONFIG: "{{.DOTFILES_LINTERS_DIR}}/{{.LINTER_FILE}}"
      PROJECT_CONFIG: "{{.CURRENT_PROJECT_DIR}}/.github/linters/{{.LINTER_FILE}}"
    cmds:
      - |
        echo ""
        echo "🔄 {{.LINTER_FILE}} 存在冲突，请选择操作:"
        echo ""

        # 使用gum提供交互选择
        CHOICE=$(gum choose \
          "覆盖项目配置 (使用dotfiles版本)" \
          "查看差异 (使用GoLand)" \
          "跳过此文件" \
          --header="选择操作:")

        case "$CHOICE" in
          "覆盖项目配置 (使用dotfiles版本)")
            echo "📋 覆盖 {{.LINTER_FILE}}"
            cp "{{.DOTFILES_CONFIG}}" "{{.PROJECT_CONFIG}}"
            echo "✅ {{.LINTER_FILE}} 已覆盖"
            ;;
          "查看差异 (使用GoLand)")
            echo "🔍 打开GoLand查看差异..."
            /Applications/GoLand.app/Contents/MacOS/goland diff "{{.PROJECT_CONFIG}}" "{{.DOTFILES_CONFIG}}"
            echo "ℹ️  请手动处理差异后重新运行任务"
            ;;
          "跳过此文件")
            echo "⏭️  跳过 {{.LINTER_FILE}}"
            ;;
          *)
            echo "❌ 无效选择，跳过 {{.LINTER_FILE}}"
            ;;
        esac

  # 列出当前项目的linter配置
  list:
    desc: 列出当前项目的linter配置文件
    cmds:
      - echo "📁 当前项目linter配置文件:"
      - ls -la {{.CURRENT_PROJECT_DIR}}/.github/linters/ 2>/dev/null || echo "❌ .github/linters目录不存在"
    interactive: true

  # 列出dotfiles中的linter配置
  list-dotfiles:
    desc: 列出dotfiles中的linter配置文件
    cmds:
      - echo "📁 dotfiles linter配置文件:"
      - ls -la {{.DOTFILES_LINTERS_DIR}}/
    interactive: true

  # 验证配置
  validate:
    desc: 验证linter配置文件
    cmds:
      - echo "🔍 验证配置文件..."
      - task: validate-dotfiles
      - task: validate-project
      - echo "✅ 验证完成"

  validate-dotfiles:
    internal: true
    cmds:
      - |
        echo "📋 验证dotfiles配置..."
        if [ ! -d "{{.DOTFILES_LINTERS_DIR}}" ]; then
          echo "❌ dotfiles linters目录不存在: {{.DOTFILES_LINTERS_DIR}}"
          exit 1
        fi
        for linter in {{join " " .SUPPORTED_LINTERS}}; do
          if [ -f "{{.DOTFILES_LINTERS_DIR}}/$linter" ]; then
            echo "✅ $linter 存在"
          else
            echo "⚠️  $linter 不存在"
          fi
        done

  validate-project:
    internal: true
    cmds:
      - |
        echo "📋 验证项目配置..."
        PROJECT_DIR="{{.CURRENT_PROJECT_DIR}}/.github/linters"
        if [ ! -d "$PROJECT_DIR" ]; then
          echo "⚠️  项目linters目录不存在"
        else
          for linter in {{join " " .SUPPORTED_LINTERS}}; do
            if [ -f "$PROJECT_DIR/$linter" ]; then
              echo "✅ $linter 存在"
            else
              echo "⚠️  $linter 不存在"
            fi
          done
        fi
