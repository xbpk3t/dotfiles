version: '3'

# Linux 专用任务

vars:
  HOSTNAME:
    sh: hostname | tr '[:upper:]' '[:lower:]'

tasks:
  # ==================== NixOS 模板任务 ====================


  update:
    desc: "更新所有 flake 到最新版本，并查看更新内容"
    cmds:
      # - task: upgrade
      - nix flake update # nix flake update --flake ./nix
      - nix flake show


  update-input:
    desc: "Update specific flake input (usage: task nix:update-input INPUT=nixpkgs)"
    cmds:
      - nix flake lock --update-input "{{.INPUT}}" ./nix
    requires:
      vars: [INPUT]


  check-config:
    internal: true
    desc: "Check nix-darwin configuration syntax"
    cmds:
      - echo "🔍 Checking configuration syntax..."
      - nix flake check .
      - echo "✅ Configuration syntax is valid"

  pin:
    cmds:
      - nix profile list # 已经 pin 的包
      # nix profile add nixpkgs#<package-name>

  syntax-verify:
    desc: 判断nix语法是否正确 # nix-instantiate --parse /Users/luck/Desktop/dotfiles/nix/home/bash.nix > /dev/null && echo "Bash.nix syntax is valid
    cmd: nix-instantiate --parse {{.CLI_ARGS}} > /dev/null && echo "Bash.nix syntax is valid


  # 从 Justfile 移植的通用 Nix 任务
  test:
    desc: "运行 eval 测试"
    cmds:
      - echo "🧪 正在运行 eval 测试..."
      - nix eval .#evalTests --show-trace --print-build-logs --verbose

  repair-store:
    desc: "修复 Nix Store 对象"
    vars:
      paths: '{{.paths}}'
    cmds:
      - 'echo "🔧 正在修复 Nix Store 对象: {{.paths}}"'
      - nix store repair {{.paths}}

  up-nix:
    desc: "更新所有 Nixpkgs 输入"
    cmds:
      - echo "📦 正在更新所有 Nixpkgs 输入..."
      - nix flake update nixpkgs nixpkgs-stable nixpkgs-unstable nixpkgs-darwin nixpkgs-ollama
      - echo "✅ 所有 Nixpkgs 输入更新完成"


  dev-shell:
    desc: "进入开发环境 shell"
    cmds:
      - echo "🐚 正在进入开发环境..."
      - |
        if [[ "{{.OS}}" == "Darwin" ]]; then
          nix shell nixpkgs#git nixpkgs#neovim
        else
          nix shell nixpkgs#git nixpkgs#neovim nixpkgs#colmena
        fi

  verify-store:
    desc: "验证 Nix Store 完整性，检查损坏的 store 对象"
    cmds:
      - echo "🔍 正在验证 Nix Store 完整性..."
      - nix store verify --all
      - echo "✅ Nix Store 验证完成"

  gcroot:
    desc: "显示所有自动 GC 根目录"
    cmds:
      - echo "📂 Nix Store 自动 GC 根目录："
      - ls -al /nix/var/nix/gcroots/auto/


  nixos-switch-template:
    desc: "NixOS 切换模板任务 (使用 nixos-cli)"
    vars:
      name: '{{.name}}'
      mode: '{{.mode | default "default"}}'
    cmds:
      - echo "nixos-switch '{{.name}}' in '{{.mode}}' mode..."
      - echo "$(printf '=%.0s' {1..50})"
      - |
        if [[ "{{.mode}}" == "debug" ]]; then
          # Debug 模式：使用详细输出
          sudo nixos apply --verbose --show-trace
        else
          # 默认模式：使用 nixos-cli
          sudo nixos switch
        fi



  # ==================== Linux 系统任务 ====================

  shell:
    desc: "进入开发环境 shell"
    cmds:
      - echo "🐚 正在进入开发环境..."
      - nix shell nixpkgs#git nixpkgs#neovim nixpkgs#colmena


#  用途：跟踪某个应用程序的文件访问行为。
#  分析：
#  使用 strace 工具跟踪指定应用（{{.app}}）的文件相关系统调用，结合参数（{{.args}}）。
#  过滤掉无关路径（如 /nix/store、/newroot、/proc），提取并整理访问的文件路径（去重并排序）。
#  使用场景：调试或分析程序的文件依赖，检查哪些文件被程序实际访问（例如，排查配置缺失或权限问题）。
#  示例：运行 trace-access app=notepad args="--file test.txt" 可以查看 Notepad 访问了哪些文件。
  trace-access:
    desc: "跟踪文件访问"
    vars:
      app: '{{.app}}'
      args: '{{.args | default ""}}'
    cmds:
      - strace -f -t -e trace=file {{.app}} {{.args}} | complete | grep -v -E "(/nix/store|/newroot|/proc)" | grep -o '"(/.*)"' | sort | uniq

#  用途：查看指定进程的环境变量。
#  分析：
#
#  通过读取 /proc/{{.pid}}/environ 文件，获取指定进程 ID（{{.pid}}）的环境变量，并将结果格式化（将空字符 \0 替换为换行符 \n）。
#  需要 sudo 权限以访问 /proc 下的文件。
#  使用场景：调试进程运行环境，检查环境变量是否正确设置（例如，排查 PATH 或自定义变量问题）。
#  示例：运行 penvof pid=1234 可以列出 PID 为 1234 的进程的所有环境变量。
  penvof:
    desc: "查看进程环境变量"
    vars:
      pid: '{{.pid}}'
    cmds:
      - sudo cat "/proc/{{.pid}}/environ" | tr '\0' '\n'
